pipeline 
{

    agent
    {
        node 
        {
            label 'qeff_node'
        }
    }
    stages 
    {
        stage('Install QEfficient')
        {
            steps
            {
                
                script
                {
                    def branchName=env.BRANCH_NAME
                    def safeBranchName = branchName.replaceAll('[^a-zA-Z0-9]', '-')
                    echo 'Pulling...' + safeBranchName
                    // sh '''
                    // . ~/.bashrc
                    // echo 'Pulling...' + env.BRANCH_NAME
                    // echo $safeBranchName
                    // docker run --privileged -dit --name ${safeBranchName} -v ./:/efficient_transformers -v  ${huggingface_hub_path}:${docker_huggingface_hub_path} ${docker_latest}:master_latest
                    // docker exec ${safeBranchName} bash -c "
                    // cd /efficient_transformers &&
                    // . /opt/qeff-env/bin/activate &&
                    // pip install --upgrade pip setuptools &&
                    // pip install .[test]"
                    // '''
                }
            }
        }
        stage('Test')
        {
                steps
                {
                    //todo(ochougul): Increase when MQ tests are enabled 
		            timeout(time: 420, unit: 'MINUTES') 
                    {
                    sh '''
                    docker exec ${safeBranchName} bash -c "
                    cd /data &&
                    . /opt/qeff-env/bin/activate &&
                    export TOKENIZERS_PARALLELISM=false &&
                    pytest -W ignore -s -v tests -o junit_logging=all --junitxml=tests/tests_log.xml &&
                    deactivate &&
                    exit" 
                    '''
                    
                }
            }
        }
    }
    post 
    {
         always 
         {
            script
            {
                try 
                {
                    sh '''
                    sudo chown -R ubuntu ./*
                    docker rm -f ${branch_name}
                    '''
                } 
                catch (error) 
                {
                    echo "Failed to delete container ${env.BRANCH_NAME}: ${error}"
                }
            }
            
            junit 'tests/tests_log.xml'
            echo 'Cleaning Workspace'
            deleteDir()
         }
    }
       
}
