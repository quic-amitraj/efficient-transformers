pipeline 
{

    agent 
    {
        node 
        {
            label 'qeff_node'
        }
    }

    stages 
    {
        stage('Docker Health Check')
        {
            steps {
                script {
                    test_results = 'position 1'
                    try
                    {
                        test_results = sh 
                        (
                        script: "python3 /home/ubuntu/sdks/build_image.py 
                        --image_name ubuntu22_nightly
                        --user_specification_file nightly_image_specs/ubuntu22_nightly.json
                        --log_level 1  --apps_sdk /home/ubuntu/sdks/qaic-apps-1.17.0.8.zip 
                        --platform_sdk qaic-platform-sdk-x86_64-deb-1.17.0.8.zip
                        notpass > output",
                        returnStdout: true
                    )
                    echo "Test results in passed test: ${test_results}"
                    } 
                    catch (err) 
                    {
                        output = readFile(file: 'output')
                        echo "Test results in failed test numb 1: " + output
                        echo "Test results in failed test numb 2: ${test_results}"
                        echo err.getMessage()
                        println err.dump()
                    }
                }
            }
        }
        stage('Install QEfficient')
        {
            steps
            {
                sh '''
                    python3.8 -m venv preflight_qeff
                    . preflight_qeff/bin/activate
                    pip install --upgrade pip setuptools
                    pip install .[test]
                    rm -rf QEfficient
                '''
            }
        }


        stage('Test')
            {
                steps
                {
                    //todo(ochougul): Increase when MQ tests are enabled 
		    timeout(time: 420, unit: 'MINUTES') {
                    sh '''
                    . preflight_qeff/bin/activate
                    export TOKENIZERS_PARALLELISM=false
                    pytest -W ignore -s -v tests -o junit_logging=all --junitxml=tests/tests_log.xml
                    deactivate
                    exit
                    '''     
                }
            }
        }
    }
    post 
    {
         always 
         {
             junit 'tests/tests_log.xml'
             echo 'Cleaning Workspace'
             deleteDir() 
         }
    }
       
}
