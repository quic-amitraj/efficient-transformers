pipeline 
{

    agent{
        node 
        {
            label 'qeff_node'
        }
    }
    environment 
    {
        CONTAINER_NAME = "qeff_container"
    }
    stages 
    {
        stage('Check Changes') 
        {
            steps 
            {
                script 
                {
                    def changedFiles = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim().split('\n')
                    if ('pyproject.toml' in changedFiles) 
                    {
                         echo "Change in pyproject.toml detected"
                         //build job: 'efficient_transformer_docker_build',  parameters: [string(name: 'BRANCH_NAME', value:  env.BRANCH_NAME.replace('PR-', ''), description: 'Branch name to checkout')]
                    }
                    else
                    {
                        echo " There is no chnage in pyproject.toml"
                       // echo "Change in pyproject.toml detected"
                        //build job: 'efficient_transformer_docker_build',  parameters: [string(name: 'BRANCH_NAME', value:  env.BRANCH_NAME.replace('PR-', ''), description: 'Branch name to checkout')]
                    }
                }
            }
        }
        stage('Install QEfficient')
        {
            steps
            {

                script
                {
                    sh '''
                    #!/bin/bash
                    . ~/.bashrc
                    echo "My name is"
                    echo ${huggingface_hub_path}
                    '''
                }
            }
        }
        stage('Test')
        {
                steps
                {
                    //todo(ochougul): Increase when MQ tests are enabled 
		            timeout(time: 420, unit: 'MINUTES') 
                    {
                    sh '''
                    docker exec ${CONTAINER_NAME} bash -c "
                    cd /data &&
                    . /opt/qeff-env/bin/activate
                    export TOKENIZERS_PARALLELISM=false &&
                    deactivate &&
                    exit"
                    sudo chown -R ubuntu ./*
                    '''
                    
                }
            }
        }
    }
    post 
    {
         always 
         {
            script
            {
                try 
                {
                    sh '''
                    docker ps
                    docker rm -f ${CONTAINER_NAME}
                    '''
                } 
                catch (err) 
                {
                    echo "Failed to delete container ${CONTAINER_NAME}: ${err}"
                }
            }
            
            echo 'Cleaning Workspace'
            deleteDir()
         }
    }
       
}
